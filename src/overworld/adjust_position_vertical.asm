
; args - A - direction, X surface flags
ADJUST_POSITION_VERTICAL: ;$C03017
	REP #PROC_FLAGS::ACCUM8 | PROC_FLAGS::INDEX8 | PROC_FLAGS::CARRY
	RESERVE_STACK_SPACE 20
	TAY
	MOVE_INT $22, $06
	MOVE_INT $06, $10
	TXA
	AND #SURFACE_FLAGS::DEEP_WATER
	CMP #SURFACE_FLAGS::SHALLOW_WATER
	BEQ @IN_SHALLOW_WATER
	CMP #SURFACE_FLAGS::DEEP_WATER
	BNE @NOT_IN_WATER_IF
	JMP a:.LOWORD(@IN_DEEP_WATER)
@NOT_IN_WATER_IF:
	JMP a:.LOWORD(@NOT_IN_WATER)
@IN_SHALLOW_WATER:
	TYA
	ASL
	ASL
	STA $02
	LDA .LOWORD(GAME_STATE)+game_state::walking_style
	ASL
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC $02
	CLC
	ADC #.LOWORD(UNKNOWN_7E4F96)
	TAY
	MOVE_INT_YPTRSRC a:.LOWORD(RAM), $06
	LDA $07
	STA $06
	SEP #PROC_FLAGS::ACCUM8
	LDA $09
	STA $08
	STZ $09
	BPL @UNKNOWN2
	DEC $09
@UNKNOWN2:
	REP #PROC_FLAGS::ACCUM8
	MOVE_INT $06, $0A
	MOVE_INT $0A, $06
	MOVE_INT_CONSTANT SHALLOW_WATER_SPEED, $0A
	JSL MULT32
	MOVE_INT $06, $0A
	MOVE_INT $10, $06
	PHA
	LDA $06
	PHA
	MOVE_INT $0A, $06
	LDA $07
	STA $06
	SEP #PROC_FLAGS::ACCUM8
	LDA $09
	STA $08
	STZ $09
	BPL @UNKNOWN3
	DEC $09
@UNKNOWN3:
	REP #PROC_FLAGS::ACCUM8
	PLA
	STA $0A
	PLA
	STA $0C
	CLC
	ADD_INT_ASSIGN $06, $0A
	MOVE_INT $06, $1A
	JMP a:.LOWORD(@UNKNOWN14)
@IN_DEEP_WATER:
	TYA
	ASL
	ASL
	STA $02
	LDA .LOWORD(GAME_STATE)+game_state::walking_style
	ASL
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC $02
	CLC
	ADC #.LOWORD(UNKNOWN_7E4F96)
	TAY
	MOVE_INT_YPTRSRC a:.LOWORD(RAM), $06
	LDA $07
	STA $06
	SEP #PROC_FLAGS::ACCUM8
	LDA $09
	STA $08
	STZ $09
	BPL @UNKNOWN5
	DEC $09
@UNKNOWN5:
	REP #PROC_FLAGS::ACCUM8
	MOVE_INT $06, $0A
	MOVE_INT $0A, $06
	MOVE_INT_CONSTANT DEEP_WATER_SPEED, $0A
	JSL MULT32
	MOVE_INT $06, $0A
	MOVE_INT $10, $06
	PHA
	LDA $06
	PHA
	MOVE_INT $0A, $06
	LDA $07
	STA $06
	SEP #PROC_FLAGS::ACCUM8
	LDA $09
	STA $08
	STZ $09
	BPL @UNKNOWN6
	DEC $09
@UNKNOWN6:
	REP #PROC_FLAGS::ACCUM8
	PLA
	STA $0A
	PLA
	STA $0C
	CLC
	ADD_INT_ASSIGN $06, $0A
	MOVE_INT $06, $1A
	JMP a:.LOWORD(@UNKNOWN14)
@NOT_IN_WATER:
	LDA a:.LOWORD(UNKNOWN_7E0081)
	BEQ @UNKNOWN8
	TYA
	ASL
	ASL
	STA $02
	LDA .LOWORD(GAME_STATE)+game_state::walking_style
	ASL
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC $02
	CLC
	ADC #.LOWORD(UNKNOWN_7E4F96)
	TAY
	MOVE_INT_YPTRSRC a:.LOWORD(RAM), $0A
	CLC
	ADD_INT_ASSIGN $06, $0A
	MOVE_INT $06, $1A
	JMP a:.LOWORD(@UNKNOWN14)
@UNKNOWN8:
	LDA .LOWORD(GAME_STATE) + game_state::unknown4B
	AND #$00FF
	CMP #$0003
	BEQ @UNKNOWN9
	JMP a:.LOWORD(@UNKNOWN13)
@UNKNOWN9:
	LDA .LOWORD(GAME_STATE)+game_state::walking_style
	STA $0E
	BEQ @UNKNOWN10
	JMP a:.LOWORD(@UNKNOWN13)
@UNKNOWN10:
	TYA
	ASL
	ASL
	STA $02
	LDA $0E
	ASL
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC $02
	CLC
	ADC #.LOWORD(UNKNOWN_7E4F96)
	TAY
	MOVE_INT_YPTRSRC a:.LOWORD(RAM), $06
	LDA $07
	STA $06
	SEP #PROC_FLAGS::ACCUM8
	LDA $09
	STA $08
	STZ $09
	BPL @UNKNOWN11
	DEC $09
@UNKNOWN11:
	REP #PROC_FLAGS::ACCUM8
	MOVE_INT $06, $0A
	MOVE_INT $0A, $06
	MOVE_INT_CONSTANT SKIP_SANDWICH_SPEED, $0A
	JSL MULT32
	MOVE_INT $06, $0A
	MOVE_INT $10, $06
	PHA
	LDA $06
	PHA
	MOVE_INT $0A, $06
	LDA $07
	STA $06
	SEP #PROC_FLAGS::ACCUM8
	LDA $09
	STA $08
	STZ $09
	BPL @UNKNOWN12
	DEC $09
@UNKNOWN12:
	REP #PROC_FLAGS::ACCUM8
	PLA
	STA $0A
	PLA
	STA $0C
	CLC
	ADD_INT_ASSIGN $06, $0A
	MOVE_INT $06, $1A
	BRA @UNKNOWN14
@UNKNOWN13:
	TYA
	ASL
	ASL
	STA $02
	LDA .LOWORD(GAME_STATE)+game_state::walking_style
	ASL
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC $02
	CLC
	ADC #.LOWORD(UNKNOWN_7E4F96)
	TAY
	MOVE_INT_YPTRSRC a:.LOWORD(RAM), $0A
	CLC
	ADD_INT_ASSIGN $06, $0A
	MOVE_INT $06, $1A
@UNKNOWN14:
	PLD
	RTS
